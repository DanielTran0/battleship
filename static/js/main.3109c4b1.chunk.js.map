{"version":3,"sources":["components/PlayerBoard.js","modules/createShip.js","modules/gameController.js","modules/createGameBoard.js","components/GameBoard.js","App.js","index.js"],"names":["PlayerBoard","props","numberAxis","Array","keys","map","item","index","className","letterAxis","generateShipMarking","coordinate","computerBoard","shipName","ships","some","ship","coordinates","sCoordinate","details","name","JSON","stringify","generateMissHitMarking","isMissedHit","missedHits","missedHit","isSuccessfulHit","successfulHits","successfulHit","grid","gridCoordinates","i","j","push","x","y","generateGridCoordinates","coord","gameOver","isSunk","data-coordinate","onClick","handlePlayerAttack","shipsRemaining","undefined","reduce","tot","cur","title","gameStart","createShip","length","hitLocations","hit","gameController","shipTypes","size","randomizeShipLocations","gameBoard","resetBoard","shipPlacementDirections","forEach","isValidPlacement","randomX","Math","floor","random","randomY","randomDirection","placeShip","playerMove","receiveHit","computerMove","playerBoard","isLastMoveHit","lastHitShip","oldX","oldY","hitAxis","axisChange","isHit","randomAxis","changeX","changeY","generateComputerMoveFromHit","createGameBoard","usedShipCoordinates","createdShip","direction","shipCoordinates","shipLength","generateShipCoordinates","checkInvalidShipPlacementInBoundary","shipCoordinate","usedCoordinate","checkInvalidShipPlacementCollision","hitX","hitY","computerRandomAxis","hitCoordinates","checkForDuplicateHit","allShipsSunk","GameBoard","useState","setGameStart","setGameOver","winner","setWinner","setPlayerBoard","setComputerBoard","isLastComputerMoveHit","setIsLastComputerMoveHit","changeablePlayerBoard","changeableComputerBoard","checkForSunkShips","changeableBoard","setBoard","parsedCoordinate","parse","isValidMove","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3109c4b1.chunk.js","sourcesContent":["import React from 'react';\n\nfunction PlayerBoard(props) {\n  const numberAxis = [...Array(11).keys()].map((item, index) => {\n    if (item === 0) return null;\n    return (\n      <div className=\"axisItem\" key={index}>\n        {item}\n      </div>\n    );\n  });\n\n  const letterAxis = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'].map((item, index) => {\n    return (\n      <div className=\"axisItem\" key={index}>\n        {item}\n      </div>\n    );\n  });\n\n  const generateGridCoordinates = () => {\n    const gridCoordinates = [];\n\n    for (let i = 1; i <= 10; i++) {\n      for (let j = 1; j <= 10; j++) {\n        gridCoordinates.push(JSON.stringify({ x: j, y: i }));\n      }\n    }\n\n    return gridCoordinates;\n  };\n\n  const generateShipMarking = (coordinate) => {\n    if (props.computerBoard) return '';\n\n    let shipName;\n\n    const spotIsShip = props.ships.some((ship) => {\n      return ship.coordinates.some((sCoordinate) => {\n        shipName = ship.details.name;\n\n        return JSON.stringify(sCoordinate) === coordinate;\n      });\n    });\n\n    if (spotIsShip) {\n      let className;\n\n      switch (shipName) {\n        case 'Carrier':\n          className = 'gridShip1';\n          break;\n        case 'Battleship':\n          className = 'gridShip2';\n          break;\n        case 'Destroyer':\n          className = 'gridShip3';\n          break;\n        case 'Submarine':\n          className = 'gridShip4';\n          break;\n        case 'Cruiser':\n          className = 'gridShip5';\n          break;\n\n        default:\n      }\n      return className;\n    }\n\n    return '';\n  };\n\n  const generateMissHitMarking = (coordinate) => {\n    const isMissedHit = props.missedHits.some(\n      (missedHit) => JSON.stringify(missedHit) === coordinate\n    );\n\n    const isSuccessfulHit = props.successfulHits.some(\n      (successfulHit) => JSON.stringify(successfulHit) === coordinate\n    );\n\n    if (isMissedHit) return <i className=\"fas fa-circle\"></i>;\n    if (isSuccessfulHit) return 'X';\n\n    return null;\n  };\n\n  const generateSunkMarking = (coordinate) => {\n    return props.ships.some((ship) => {\n      return ship.coordinates.some((coord) => {\n        if (JSON.stringify(coord) === coordinate && ship.details.isSunk()) return true;\n        return false;\n      });\n    });\n  };\n\n  const grid = generateGridCoordinates().map((coord, index) => {\n    return (\n      <div\n        key={index}\n        className={`square ${\n          props.computerBoard && !props.gameOver && !generateMissHitMarking(coord)\n            ? 'clickable'\n            : ''\n        } ${generateShipMarking(coord)} ${generateMissHitMarking(coord) === 'X' ? 'hit' : ''} ${\n          generateSunkMarking(coord) ? 'sunk' : ''\n        } `}\n        data-coordinate={coord}\n        onClick={\n          props.handlePlayerAttack && props.computerBoard\n            ? () => props.handlePlayerAttack(coord)\n            : null\n        }\n      >\n        <span className={'missHit'}>{generateMissHitMarking(coord)}</span>\n      </div>\n    );\n  });\n\n  const shipsRemaining = () => {\n    if (props.ships === undefined) return;\n\n    return props.ships.reduce((tot, cur) => {\n      if (cur.details.isSunk()) return tot;\n\n      return (tot += 1);\n    }, 0);\n  };\n\n  return (\n    <div className=\"playerBoard\">\n      <h2 className={!props.computerBoard ? 'playerBoardTitle' : ''}>{props.title}</h2>\n      <div className=\"singleBoard\">\n        <div></div>\n        <div className=\"numberAxis\">{numberAxis}</div>\n        <div className=\"letterAxis\">{letterAxis}</div>\n        <div className=\"grid\">{grid}</div>\n      </div>\n      <p className={!props.computerBoard ? 'playerRemain' : ''}>\n        {props.gameStart\n          ? props.computerBoard\n            ? `Enemy Ships Remaining: ${shipsRemaining()}`\n            : `Your Ships Remaining: ${shipsRemaining()}`\n          : null}\n      </p>\n    </div>\n  );\n}\n\nexport default PlayerBoard;\n","const createShip = (length, name) => {\n  const hitLocations = [];\n\n  const hit = (x, y) => {\n    hitLocations.push({ x: x, y: y });\n  };\n\n  const isSunk = () => {\n    return hitLocations.length === length;\n  };\n\n  return { length, name, hitLocations, hit, isSunk };\n};\n\nexport default createShip;\n","import createShip from './createShip';\n\nconst gameController = (() => {\n  const shipTypes = [\n    { name: 'Carrier', size: 5 },\n    { name: 'Battleship', size: 4 },\n    { name: 'Destroyer', size: 3 },\n    { name: 'Submarine', size: 3 },\n    { name: 'Cruiser', size: 2 },\n  ];\n\n  const randomizeShipLocations = (gameBoard) => {\n    if (gameBoard.ships.length !== 0) gameBoard.resetBoard();\n\n    const shipPlacementDirections = ['u', 'r'];\n\n    shipTypes.forEach((ship) => {\n      let isValidPlacement = false;\n\n      while (!isValidPlacement) {\n        const randomX = Math.floor(Math.random() * 10);\n        const randomY = Math.floor(Math.random() * 10);\n        const randomDirection = shipPlacementDirections[Math.floor(Math.random() * 2)];\n\n        isValidPlacement = gameBoard.placeShip(\n          createShip(ship.size, ship.name),\n          randomX,\n          randomY,\n          randomDirection\n        );\n      }\n    });\n\n    return true;\n  };\n\n  const playerMove = (computerBoard, x, y) => {\n    return computerBoard.receiveHit(x, y);\n  };\n\n  const generateComputerMoveFromHit = (playerBoard) => {\n    const {\n      coordinate: { x: oldX, y: oldY },\n      hitAxis,\n    } = playerBoard.lastHitShip[0];\n    const axisChange = ['x', 'y'];\n    let isHit = null;\n\n    if (hitAxis === undefined) {\n      while (isHit === null) {\n        let randomAxis = axisChange[Math.floor(Math.random() * 2)];\n\n        if (randomAxis === 'x') {\n          if (oldX + 1 <= 10) isHit = playerBoard.receiveHit(oldX + 1, oldY, 'x+');\n\n          if (isHit === null && oldX - 1 >= 1) isHit = playerBoard.receiveHit(oldX - 1, oldY, 'x-');\n        } else if (randomAxis === 'y') {\n          if (oldY + 1 <= 10) isHit = playerBoard.receiveHit(oldX, oldY + 1, 'y+');\n\n          if (isHit === null && oldY - 1 >= 1) isHit = playerBoard.receiveHit(oldX, oldY - 1, 'y-');\n        }\n      }\n    } else if (hitAxis[0] === 'x') {\n      if (hitAxis === 'x+' && oldX + 1 <= 10) isHit = playerBoard.receiveHit(oldX + 1, oldY, 'x+');\n      if (hitAxis === 'x-' && oldX - 1 >= 1) isHit = playerBoard.receiveHit(oldX - 1, oldY, 'x-');\n\n      let changeX = 1;\n      while (isHit === null) {\n        if (hitAxis === 'x+' && oldX - 1 >= 1) {\n          isHit = playerBoard.receiveHit(oldX - changeX, oldY, 'x+');\n          changeX += 1;\n        }\n\n        if (hitAxis === 'x-' && oldX + 1 <= 10) {\n          isHit = playerBoard.receiveHit(oldX + changeX, oldY, 'x-');\n          changeX += 1;\n        }\n      }\n    } else if (hitAxis[0] === 'y') {\n      if (hitAxis === 'y+' && oldY + 1 <= 10) isHit = playerBoard.receiveHit(oldX, oldY + 1, 'y+');\n      if (hitAxis === 'y-' && oldY - 1 >= 1) isHit = playerBoard.receiveHit(oldX, oldY - 1, 'y-');\n\n      let changeY = 1;\n      while (isHit === null) {\n        if (hitAxis === 'y+' && oldY - 1 >= 1) {\n          isHit = playerBoard.receiveHit(oldX, oldY - changeY, 'y+');\n          changeY += 1;\n        }\n\n        if (hitAxis === 'y-' && oldY + 1 <= 10) {\n          isHit = playerBoard.receiveHit(oldX, oldY + changeY, 'y-');\n          changeY += 1;\n        }\n      }\n    }\n\n    return isHit;\n  };\n\n  const computerMove = (playerBoard, isLastMoveHit) => {\n    if (isLastMoveHit && !playerBoard.lastHitShip[0].ship.details.isSunk()) {\n      return generateComputerMoveFromHit(playerBoard);\n    }\n\n    let x = Math.floor(Math.random() * 10) + 1;\n    let y = Math.floor(Math.random() * 10) + 1;\n    let isHit = playerBoard.receiveHit(x, y);\n\n    if (isHit === null) {\n      while (isHit === null) {\n        x = Math.floor(Math.random() * 10) + 1;\n        y = Math.floor(Math.random() * 10) + 1;\n        isHit = playerBoard.receiveHit(x, y);\n      }\n    }\n\n    return isHit;\n  };\n\n  return { randomizeShipLocations, playerMove, computerMove };\n})();\n\nexport default gameController;\n","const createGameBoard = () => {\n  let ships = [];\n  let usedShipCoordinates = [];\n  let missedHits = [];\n  let successfulHits = [];\n  let lastHitShip = [];\n\n  const generateShipCoordinates = (shipLength, x, y, direction) => {\n    const shipCoordinates = [];\n\n    for (let i = 0; i < shipLength; i++) {\n      direction === 'u'\n        ? shipCoordinates.push({ x: x, y: y + i })\n        : shipCoordinates.push({ x: x + i, y: y });\n    }\n\n    return shipCoordinates;\n  };\n\n  const checkInvalidShipPlacementInBoundary = (shipLength, x, y, direction) => {\n    if (x === 0 || y === 0 || x > 10 || y > 10) return true;\n\n    if (direction === 'u') {\n      if (y + shipLength - 1 > 10) return true;\n\n      return false;\n    }\n    if (x + shipLength - 1 > 10) return true;\n\n    return false;\n  };\n\n  const checkInvalidShipPlacementCollision = (shipCoordinates) => {\n    return shipCoordinates.some((shipCoordinate) => {\n      return usedShipCoordinates.some((usedCoordinate) => {\n        const { x, y } = usedCoordinate;\n\n        return (\n          JSON.stringify(usedCoordinate) === JSON.stringify(shipCoordinate) ||\n          JSON.stringify({ x: x + 1, y: y }) === JSON.stringify(shipCoordinate) ||\n          JSON.stringify({ x: x - 1, y: y }) === JSON.stringify(shipCoordinate) ||\n          JSON.stringify({ x: x, y: y + 1 }) === JSON.stringify(shipCoordinate) ||\n          JSON.stringify({ x: x, y: y - 1 }) === JSON.stringify(shipCoordinate)\n        );\n      });\n    });\n  };\n\n  const placeShip = (createdShip, x, y, direction) => {\n    const shipCoordinates = generateShipCoordinates(createdShip.length, x, y, direction);\n\n    if (checkInvalidShipPlacementInBoundary(createdShip.length, x, y, direction)) return false;\n    if (checkInvalidShipPlacementCollision(shipCoordinates)) return false;\n\n    ships.push({ coordinates: shipCoordinates, details: createdShip, direction: direction });\n    usedShipCoordinates.push(...shipCoordinates);\n\n    return true;\n  };\n\n  const checkForDuplicateHit = (hitCoordinates) => {\n    return (\n      missedHits.some((hit) => JSON.stringify(hit) === JSON.stringify(hitCoordinates)) ||\n      successfulHits.some((hit) => JSON.stringify(hit) === JSON.stringify(hitCoordinates))\n    );\n  };\n\n  const receiveHit = (hitX, hitY, computerRandomAxis) => {\n    const hitCoordinates = { x: hitX, y: hitY };\n\n    if (checkForDuplicateHit(hitCoordinates)) return null;\n\n    const isHit = ships.some((ship) => {\n      return ship.coordinates.some((coordinate) => {\n        if (JSON.stringify(coordinate) === JSON.stringify(hitCoordinates)) {\n          successfulHits.push(hitCoordinates);\n          ship.details.hit(hitX, hitY);\n          lastHitShip.length = 0;\n          lastHitShip.push({ coordinate: hitCoordinates, ship: ship, hitAxis: computerRandomAxis });\n\n          return true;\n        }\n\n        return false;\n      });\n    });\n\n    if (!isHit) missedHits.push(hitCoordinates);\n\n    return isHit;\n  };\n\n  const allShipsSunk = () => {\n    return successfulHits.length === usedShipCoordinates.length;\n  };\n\n  const resetBoard = () => {\n    ships.length = 0;\n    usedShipCoordinates.length = 0;\n    missedHits.length = 0;\n    successfulHits.length = 0;\n    lastHitShip.length = 0;\n  };\n\n  return {\n    ships,\n    missedHits,\n    successfulHits,\n    lastHitShip,\n    placeShip,\n    receiveHit,\n    allShipsSunk,\n    resetBoard,\n  };\n};\n\nexport default createGameBoard;\n","import React, { useState } from 'react';\nimport PlayerBoard from './PlayerBoard';\nimport gameController from '../modules/gameController';\nimport createGameBoard from '../modules/createGameBoard';\n\nfunction GameBoard() {\n  const [gameStart, setGameStart] = useState(false);\n  const [gameOver, setGameOver] = useState(false);\n  const [winner, setWinner] = useState(null);\n  const [playerBoard, setPlayerBoard] = useState(createGameBoard());\n  const [computerBoard, setComputerBoard] = useState(createGameBoard());\n  const [isLastComputerMoveHit, setIsLastComputerMoveHit] = useState(false);\n  const changeablePlayerBoard = { ...playerBoard };\n  const changeableComputerBoard = { ...computerBoard };\n\n  const handleStartRestartButton = () => {\n    if (playerBoard.ships.length !== 5) return;\n\n    if (gameStart) {\n      changeablePlayerBoard.resetBoard();\n      setPlayerBoard(changeablePlayerBoard);\n\n      changeableComputerBoard.resetBoard();\n      setComputerBoard(changeableComputerBoard);\n      setGameOver(false);\n      setIsLastComputerMoveHit(false);\n    } else {\n      gameController.randomizeShipLocations(changeableComputerBoard);\n      setComputerBoard(changeableComputerBoard);\n      setGameOver(false);\n      setIsLastComputerMoveHit(false);\n    }\n\n    setGameStart(!gameStart);\n  };\n\n  const handleRandomizeButton = () => {\n    gameController.randomizeShipLocations(changeablePlayerBoard);\n    setPlayerBoard(changeablePlayerBoard);\n  };\n\n  const checkForSunkShips = (changeableBoard, setBoard) => {\n    changeableBoard.ships.forEach((ship) => {\n      if (ship.details.isSunk()) {\n        ship.coordinates.forEach((coordinate, index) => {\n          const { x, y } = coordinate;\n\n          if (ship.direction === 'u') {\n            if (index === 0) {\n              changeableBoard.missedHits.push({ x: x, y: y - 1 });\n            } else if (index === ship.coordinates.length - 1) {\n              changeableBoard.missedHits.push({ x: x, y: y + 1 });\n            }\n            changeableBoard.missedHits.push({ x: x + 1, y: y });\n            changeableBoard.missedHits.push({ x: x - 1, y: y });\n          } else if (ship.direction === 'r') {\n            if (index === 0) {\n              changeableBoard.missedHits.push({ x: x - 1, y: y });\n            } else if (index === ship.coordinates.length - 1) {\n              changeableBoard.missedHits.push({ x: x + 1, y: y });\n            }\n\n            changeableBoard.missedHits.push({ x: x, y: y + 1 });\n            changeableBoard.missedHits.push({ x: x, y: y - 1 });\n          }\n        });\n      }\n    });\n    setBoard(changeableBoard);\n  };\n\n  const computerAttack = () => {\n    const compMove = gameController.computerMove(changeablePlayerBoard, isLastComputerMoveHit);\n\n    if (compMove) {\n      setIsLastComputerMoveHit(true);\n    }\n\n    setPlayerBoard(changeablePlayerBoard);\n  };\n\n  const handlePlayerAttack = (coordinate) => {\n    if (gameOver) return;\n\n    const parsedCoordinate = JSON.parse(coordinate);\n    const isValidMove = gameController.playerMove(\n      changeableComputerBoard,\n      parsedCoordinate.x,\n      parsedCoordinate.y\n    );\n    setComputerBoard(changeableComputerBoard);\n\n    if (isValidMove === null) return;\n    if (changeableComputerBoard.allShipsSunk()) {\n      setGameOver(true);\n      setWinner('You Win');\n    }\n\n    computerAttack();\n\n    if (changeablePlayerBoard.allShipsSunk()) {\n      setGameOver(true);\n      setWinner('The Enemy has Won');\n    }\n\n    checkForSunkShips(changeablePlayerBoard, setPlayerBoard);\n    checkForSunkShips(changeableComputerBoard, setComputerBoard);\n  };\n\n  return (\n    <div className=\"gameBoard\">\n      <h1>Battleship</h1>\n      <h2 className={winner === 'You Win' ? 'winPlayer' : 'winComputer'}>{gameOver && winner}</h2>\n      <div className=\"playerBoards\">\n        <PlayerBoard\n          title={'Your Board'}\n          computerBoard={false}\n          gameStart={gameStart}\n          ships={playerBoard.ships}\n          missedHits={playerBoard.missedHits}\n          successfulHits={playerBoard.successfulHits}\n        />\n        {gameStart && (\n          <PlayerBoard\n            title={'Enemy Board'}\n            computerBoard={true}\n            gameStart={gameStart}\n            gameOver={gameOver}\n            ships={computerBoard.ships}\n            missedHits={computerBoard.missedHits}\n            successfulHits={computerBoard.successfulHits}\n            handlePlayerAttack={handlePlayerAttack}\n          />\n        )}\n      </div>\n      <div className=\"buttons\">\n        <button\n          onClick={handleStartRestartButton}\n          className={playerBoard.ships.length !== 5 ? 'buttonOff' : ''}\n        >\n          {gameStart ? 'Restart Game' : 'Start Game'}\n        </button>\n        {!gameStart && <button onClick={handleRandomizeButton}>Randomize Locations</button>}\n      </div>\n    </div>\n  );\n}\n\nexport default GameBoard;\n","import './App.css';\nimport GameBoard from './components/GameBoard';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <GameBoard />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}